{"version":3,"sources":["../src/index.js"],"names":["url","process","env","DATA_BASE","mongoose","connect","useCreateIndex","useNewUrlParser","useFindAndModify","useUnifiedTopology","mongodb","connection","on","console","error","bind","log","server","ApolloServer","typeDefs","resolvers","schemaDirectives","AuthDirective","context","req","listen","then"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAKA,IAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAxB;;AACAC,qBAASC,OAAT,CAAiBL,GAAjB,EAAsB;AACrBM,EAAAA,cAAc,EAAE,IADK;AAErBC,EAAAA,eAAe,EAAE,IAFI;AAGrBC,EAAAA,gBAAgB,EAAE,KAHG;AAIrBC,EAAAA,kBAAkB,EAAE;AAJC,CAAtB;;AAMA,IAAMC,OAAO,GAAGN,qBAASO,UAAzB;AACAD,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,sBAA5B,CAApB;AACAH,OAAO,CAACE,EAAR,CAAW,MAAX,EAAmB;AAAA,SAAMC,OAAO,CAACG,GAAR,CAAY,gBAAZ,CAAN;AAAA,CAAnB,E,CAEA;AACA;;AACA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC/BC,EAAAA,QAAQ,EAARA,kBAD+B;AAE/BC,EAAAA,SAAS,EAATA,qBAF+B;AAG/BC,EAAAA,gBAAgB,EAAE;AACjBC,IAAAA,aAAa,EAAbA;AADiB,GAHa;AAM/BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,GAAT,QAASA,GAAT;AAAA,gDAAmB,sCAAWA,GAAX,CAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANwB,CAAjB,CAAf,C,CASA;;AACAP,MAAM,CAACQ,MAAP,GAAgBC,IAAhB,CAAqB,iBAAa;AAAA,MAAV1B,GAAU,SAAVA,GAAU;AACjCa,EAAAA,OAAO,CAACG,GAAR,yCAAmChB,GAAnC;AACA,CAFD","sourcesContent":["import { ApolloServer } from 'apollo-server';\r\nimport mongoose from 'mongoose';\r\n\r\nimport typeDefs from './graphql/schema';\r\nimport resolvers from './graphql/resolvers';\r\nimport {\r\n\tAuthDirective,\r\n\tgetContext,\r\n} from './graphql/acciones/accionesAutorizacion'\r\n\r\nconst url = process.env.DATA_BASE;\r\nmongoose.connect(url, {\r\n\tuseCreateIndex: true,\r\n\tuseNewUrlParser: true,\r\n\tuseFindAndModify: false,\r\n\tuseUnifiedTopology: true\r\n});\r\nconst mongodb = mongoose.connection;\r\nmongodb.on('error', console.error.bind(console, \"Error de conexion!!!\"));\r\nmongodb.on('open', () => console.log('Conectado a BD'));\r\n\r\n// The ApolloServer constructor requires two parameters: your schema\r\n// definition and your set of resolvers.\r\nconst server = new ApolloServer({\r\n\ttypeDefs,\r\n\tresolvers,\r\n\tschemaDirectives: {\r\n\t\tAuthDirective,\r\n\t},\r\n\tcontext: async ({ req }) => getContext(req)\r\n});\r\n\r\n// The `listen` method launches a web server.\r\nserver.listen().then(({ url }) => {\r\n\tconsole.log(`ğŸš€  Server ready at ${url}`);\r\n});"],"file":"index.js"}