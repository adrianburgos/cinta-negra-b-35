{"version":3,"sources":["../../src/graphql/schema.js"],"names":["typeDefs","gql"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;AACA;AACA;AAEA,IAAMA,QAAQ,OAAGC,iBAAH,oBAAd;eAgGeD,Q","sourcesContent":["import { gql } from 'apollo-server';\r\n// A schema is a collection of type definitions (hence \"typeDefs\")\r\n// that together define the \"shape\" of queries that are executed against\r\n// your data.\r\n\r\nconst typeDefs = gql`\r\n\r\n    directive @AuthDirective on QUERY | FIELD_DEFINITION | FIELD\r\n\r\n    scalar Date\r\n\t# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\r\n\r\n\t# This \"Book\" type defines the queryable fields for every book in our data source.\r\n\ttype Book {\r\n\t\ttitle: String\r\n\t\tauthor: String\r\n    }\r\n    \r\n    type Food {\r\n\t\tname: String\r\n\t\tcal: Int\r\n    }\r\n    \r\n    type Token{\r\n        token: String,\r\n    }\r\n\r\n\ttype Usuario {\r\n        _id: ID\r\n        nombre: String\r\n        apellido: String\r\n        email: String\r\n        genero: String\r\n        clave: String\r\n        enfermedades: [Enfermedad]\r\n        signosVitales: [SignoVital]\r\n    }\r\n    \r\n    input UsuarioInput {\r\n        nombre: String\r\n        apellido: String\r\n        email: String\r\n        genero: String\r\n        clave: String\r\n        imagenPerfil: Upload\r\n    }\r\n\r\n    type Enfermedad {\r\n        _id: ID\r\n        tipo: String\r\n        nombre: String\r\n        descripcion: String\r\n        curada: Boolean\r\n    }\r\n    \r\n    input EnfermedadInput {\r\n        tipo: String\r\n        nombre: String\r\n        descripcion: String\r\n    }\r\n\r\n    type SignoVital{\r\n        _id: ID\r\n        tipoSigno: String\r\n        valorInferior: String\r\n        valorSuperior: String\r\n        dimensionales: String\r\n        createdAt: Date\r\n        updatedAt: Date\r\n    }\r\n\r\n    input SignoVitalInput{\r\n        tipoSigno: String\r\n        valorInferior: String\r\n        valorSuperior: String\r\n        dimensionales: String\r\n    }\r\n    \r\n    \r\n\r\n\t# The \"Query\" type is special: it lists all of the available queries that\r\n\t# clients can execute, along with the return type for each. In this\r\n\t# case, the \"books\" query returns an array of zero or more Books (defined above).\r\n\ttype Query {\r\n        books: [Book] @AuthDirective\r\n        getUsuario: Usuario @AuthDirective\r\n        getEnfermedades: [Enfermedad] @AuthDirective\r\n        getSignosVitales: [SignoVital] @AuthDirective\r\n    }\r\n    \r\n    type Mutation {\r\n        addUsuario(input: UsuarioInput): Token\r\n        addEnfermedad(input: EnfermedadInput): Enfermedad @AuthDirective\r\n        updateEnfermedadNombre(nombre: String, enfermedadID: ID): Enfermedad @AuthDirective\r\n        updateEnfermedadDescipcion(descripcion: String, enfermedadID: ID): Enfermedad @AuthDirective\r\n        updateEnfermedadCurada(curada: Boolean, enfermedadID: ID): Enfermedad @AuthDirective\r\n        addSignoVital(signo: SignoVitalInput): SignoVital @AuthDirective\r\n        iniciarSesion(usuario: String, clave: String): Token\r\n    }\r\n`;\r\n\r\nexport default typeDefs;"],"file":"schema.js"}