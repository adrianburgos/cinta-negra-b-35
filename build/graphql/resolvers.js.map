{"version":3,"sources":["../../src/graphql/resolvers.js"],"names":["books","title","author","foods","name","cal","resolvers","Query","getUsuario","parent","data","context","info","usuario","console","log","getEnfermedades","_id","getSignosVitales","Mutation","addUsuario","input","imagenPerfil","createReadStream","stream","url","infoUsuario","addEnfermedad","newEnfermedad","filter","update","$push","updatedUsuario","updateEnfermedadNombre","nombre","enfermedadID","$set","updateEnfermedadDescipcion","descripcion","updateEnfermedadCurada","curada","iniciarSesion","clave","addSignoVital","signo","nuevoSigno","signosVitales","usuarioActualizado"],"mappings":"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","sourcesContent":["import {\r\n    addUsuarioAccion,\r\n    updateUsuarioAccion,\r\n    iniciarSesionAccion,\r\n    getUsuarioAccion,\r\n    getEnfermedadesFromUsuarioAccion,\r\n    getSignosVitalesFromUsuarioAccion\r\n} from './acciones/accionesUsuario';\r\nimport {\r\n    addEnfermedadAccion,\r\n    updateEnfermedadAccion\r\n} from './acciones/accionesEnfermedad';\r\n\r\nimport { addSignoVitalAccion } from './acciones/accionesSignoVital';\r\n\r\nimport { storeUpload } from './acciones/utils/uploader'\r\n\r\nconst books = [\r\n    {\r\n        title: 'Harry Potter and the Chamber of Secrets',\r\n        author: 'J.K. Rowling',\r\n    },\r\n    {\r\n        title: 'Jurassic Park',\r\n        author: 'Michael Crichton',\r\n    },\r\n];\r\n\r\nconst foods = [\r\n    {\r\n        name: 'meat',\r\n        cal: 200\r\n    },\r\n    {\r\n        name: 'cookies',\r\n        cal: 500\r\n    }\r\n]\r\n\r\n\r\n// Resolvers define the technique for fetching the types defined in the\r\n// schema. This resolver retrieves books from the \"books\" array above.\r\nconst resolvers = {\r\n    Query: {\r\n        books: () => books,\r\n        getUsuario: async (parent, data, context, info) => {\r\n            try {\r\n                const { usuario } = context;\r\n                return await getUsuarioAccion(usuario);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error)\r\n            }\r\n        },\r\n        getEnfermedades: async (parent, data, context, info) => {\r\n            try {\r\n                const { usuario } = context;\r\n                return await getEnfermedadesFromUsuarioAccion(usuario._id);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error);\r\n            }\r\n        },\r\n        getSignosVitales: async (parent, data, context, info) => {\r\n            try {\r\n                const { usuario } = context;\r\n                return await getSignosVitalesFromUsuarioAccion(usuario._id);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error);\r\n            }\r\n        },\r\n    },\r\n\r\n    Mutation: {\r\n        //en todas las funciones de los resolves se reciben 4 parametros,\r\n        // parent - funciones necesarias para manejo interno de graphql\r\n        // data - argumentos de la funcion resolver\r\n        // context - variables globales entre resolvers\r\n        // info - informacion del user agent (quien pide la informacion)\r\n        addUsuario: async (parent, data, context, info) => {\r\n            try {\r\n                //sube el archivo a cloudinary\r\n                const { createReadStream } = await data.input.imagenPerfil;\r\n                const stream = createReadStream();\r\n                const { url } = await storeUpload(stream, 'image');\r\n\r\n                //registra usuario\r\n                const infoUsuario = {\r\n                    ...data.input,\r\n                    imagenPerfil: url\r\n                }\r\n                return await addUsuarioAccion(infoUsuario);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error)\r\n            }\r\n        },\r\n        addEnfermedad: async (parent, data, context, info) => {\r\n            try {\r\n                const { input } = data;\r\n                const { usuario } = context;\r\n                const newEnfermedad = await addEnfermedadAccion(input);\r\n\r\n                const filter = { _id: usuario._id };\r\n                const update = { $push: { 'enfermedades': newEnfermedad._id } };\r\n\r\n                const updatedUsuario = await updateUsuarioAccion(filter, update);\r\n                console.log(\"TCL: updatedUsuario\", updatedUsuario)\r\n                return newEnfermedad\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error)\r\n            }\r\n        },\r\n        updateEnfermedadNombre: async (parent, data, context, info) => {\r\n            try {\r\n                const { nombre, enfermedadID } = data;\r\n                const filter = { _id: enfermedadID };\r\n                const update = { $set: { nombre } };\r\n                return await updateEnfermedadAccion(filter, update);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error);\r\n            }\r\n        },\r\n        updateEnfermedadDescipcion: async (parent, data, context, info) => {\r\n            try {\r\n                const { descripcion, enfermedadID } = data;\r\n                const filter = { _id: enfermedadID };\r\n                const update = { $set: { descripcion } };\r\n                return await updateEnfermedadAccion(filter, update);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error);\r\n            }\r\n        },\r\n        updateEnfermedadCurada: async (parent, data, context, info) => {\r\n            try {\r\n                const { curada, enfermedadID } = data;\r\n                const filter = { _id: enfermedadID };\r\n                const update = { $set: { curada: curada } };\r\n                return await updateEnfermedadAccion(filter, update);\r\n            } catch (error) {\r\n                console.log(\"TCL: updateEnfermedadCurada: -> error\", error)\r\n            }\r\n        },\r\n        iniciarSesion: async (parent, data, context, info) => {\r\n            try {\r\n                const { usuario, clave } = data;\r\n                return await iniciarSesionAccion(usuario, clave);\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error)\r\n            }\r\n        },\r\n        addSignoVital: async (parent, data, context, info) => {\r\n            try {\r\n                const { signo } = data;\r\n                const { usuario } = context;\r\n                console.log(\"TCL: usuario\", usuario)\r\n                const nuevoSigno = await addSignoVitalAccion(signo);\r\n\r\n                const filter = { _id: usuario._id };\r\n                const update = { $push: { signosVitales: nuevoSigno._id } }; //el objeto debe de llamarse igual que el esquema\r\n                const usuarioActualizado = await updateUsuarioAccion(filter, update);\r\n                console.log(\"TCL: usuarioActualizado\", usuarioActualizado)\r\n\r\n                return nuevoSigno;\r\n\r\n            } catch (error) {\r\n                console.log(\"TCL: error\", error)\r\n            }\r\n        },\r\n    }\r\n};\r\n\r\nexport default resolvers;"],"file":"resolvers.js"}